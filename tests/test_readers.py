#!/usr/bin/python
# -*- coding: utf-8 -*-
import pathlib

from numpy.testing import assert_allclose

from . import readers


def test_load_fourier_spectrum():
    fpath = pathlib.Path(__file__).parent / "data"
    fpath /= "test-bj84.m6.00r020.0_fs.col"
    d = readers.load_fourier_spectrum(str(fpath))

    assert_allclose(d["mag"], 6)
    assert_allclose(d["dist"], 20)
    assert_allclose(
        d["freqs"],
        [
            5.000e-02,
            5.213e-02,
            5.435e-02,
            5.666e-02,
            5.907e-02,
            6.158e-02,
            6.421e-02,
            6.694e-02,
            6.979e-02,
            7.276e-02,
            7.585e-02,
            7.908e-02,
            8.245e-02,
            8.596e-02,
            8.962e-02,
            9.343e-02,
            9.741e-02,
            1.016e-01,
            1.059e-01,
            1.104e-01,
            1.151e-01,
            1.200e-01,
            1.251e-01,
            1.304e-01,
            1.360e-01,
            1.417e-01,
            1.478e-01,
            1.541e-01,
            1.606e-01,
            1.675e-01,
            1.746e-01,
            1.820e-01,
            1.898e-01,
            1.978e-01,
            2.063e-01,
            2.150e-01,
            2.242e-01,
            2.337e-01,
            2.437e-01,
            2.540e-01,
            2.649e-01,
            2.761e-01,
            2.879e-01,
            3.001e-01,
            3.129e-01,
            3.262e-01,
            3.401e-01,
            3.546e-01,
            3.697e-01,
            3.854e-01,
            4.018e-01,
            4.189e-01,
            4.367e-01,
            4.553e-01,
            4.747e-01,
            4.949e-01,
            5.160e-01,
            5.379e-01,
            5.608e-01,
            5.847e-01,
            6.096e-01,
            6.355e-01,
            6.626e-01,
            6.907e-01,
            7.201e-01,
            7.508e-01,
            7.828e-01,
            8.161e-01,
            8.508e-01,
            8.870e-01,
            9.248e-01,
            9.641e-01,
            1.005e00,
            1.048e00,
            1.093e00,
            1.139e00,
            1.187e00,
            1.238e00,
            1.291e00,
            1.346e00,
            1.403e00,
            1.463e00,
            1.525e00,
            1.590e00,
            1.657e00,
            1.728e00,
            1.802e00,
            1.878e00,
            1.958e00,
            2.041e00,
            2.128e00,
            2.219e00,
            2.313e00,
            2.412e00,
            2.514e00,
            2.621e00,
            2.733e00,
            2.849e00,
            2.971e00,
            3.097e00,
            3.229e00,
            3.366e00,
            3.510e00,
            3.659e00,
            3.815e00,
            3.977e00,
            4.146e00,
            4.323e00,
            4.507e00,
            4.698e00,
            4.898e00,
            5.107e00,
            5.324e00,
            5.551e00,
            5.787e00,
            6.033e00,
            6.290e00,
            6.558e00,
            6.837e00,
            7.128e00,
            7.431e00,
            7.748e00,
            8.077e00,
            8.421e00,
            8.780e00,
            9.153e00,
            9.543e00,
            9.949e00,
            1.037e01,
            1.081e01,
            1.127e01,
            1.175e01,
            1.225e01,
            1.278e01,
            1.332e01,
            1.389e01,
            1.448e01,
            1.509e01,
            1.574e01,
            1.641e01,
            1.710e01,
            1.783e01,
            1.859e01,
            1.938e01,
            2.021e01,
            2.107e01,
            2.196e01,
            2.290e01,
            2.387e01,
            2.489e01,
            2.595e01,
            2.705e01,
            2.820e01,
            2.940e01,
            3.065e01,
            3.196e01,
            3.332e01,
            3.474e01,
            3.622e01,
            3.776e01,
            3.936e01,
            4.104e01,
            4.279e01,
            4.461e01,
            4.651e01,
            4.848e01,
            5.055e01,
            5.270e01,
            5.494e01,
            5.728e01,
            5.972e01,
            6.226e01,
            6.491e01,
            6.767e01,
            7.055e01,
            7.355e01,
            7.669e01,
            7.995e01,
            8.335e01,
            8.690e01,
            9.060e01,
            9.445e01,
            9.847e01,
            1.027e02,
            1.070e02,
            1.116e02,
            1.163e02,
            1.213e02,
            1.265e02,
            1.318e02,
            1.374e02,
            1.433e02,
            1.494e02,
            1.557e02,
            1.624e02,
            1.693e02,
            1.765e02,
            1.840e02,
            1.918e02,
            2.000e02,
        ],
    )
    assert_allclose(
        d["fourier_amps"],
        [
            2.56424e-01,
            2.78117e-01,
            3.01592e-01,
            3.26985e-01,
            3.54442e-01,
            3.84116e-01,
            4.16172e-01,
            4.50783e-01,
            4.88130e-01,
            5.28404e-01,
            5.71807e-01,
            6.18545e-01,
            6.68836e-01,
            7.22902e-01,
            7.80972e-01,
            8.43277e-01,
            9.10052e-01,
            9.84194e-01,
            1.06863e00,
            1.15950e00,
            1.25715e00,
            1.36192e00,
            1.47413e00,
            1.59408e00,
            1.72203e00,
            1.85821e00,
            2.00279e00,
            2.15588e00,
            2.31748e00,
            2.48753e00,
            2.66582e00,
            2.85203e00,
            3.04566e00,
            3.24604e00,
            3.46270e00,
            3.69178e00,
            3.92976e00,
            4.17620e00,
            4.43053e00,
            4.69210e00,
            4.96015e00,
            5.23381e00,
            5.51212e00,
            5.79402e00,
            6.07841e00,
            6.36406e00,
            6.64975e00,
            6.93418e00,
            7.21603e00,
            7.49399e00,
            7.76673e00,
            8.03296e00,
            8.29143e00,
            8.54091e00,
            8.78027e00,
            9.00841e00,
            9.22434e00,
            9.42713e00,
            9.61596e00,
            9.79006e00,
            9.98162e00,
            1.02165e01,
            1.04433e01,
            1.06616e01,
            1.08714e01,
            1.10725e01,
            1.12649e01,
            1.14484e01,
            1.16232e01,
            1.17892e01,
            1.19465e01,
            1.20953e01,
            1.22505e01,
            1.25065e01,
            1.27580e01,
            1.30048e01,
            1.32470e01,
            1.34845e01,
            1.37172e01,
            1.39450e01,
            1.41679e01,
            1.43858e01,
            1.45985e01,
            1.48059e01,
            1.50080e01,
            1.52046e01,
            1.53955e01,
            1.55805e01,
            1.57595e01,
            1.58762e01,
            1.59276e01,
            1.59709e01,
            1.60058e01,
            1.60325e01,
            1.60506e01,
            1.60601e01,
            1.60609e01,
            1.60527e01,
            1.60354e01,
            1.60089e01,
            1.59729e01,
            1.59274e01,
            1.58721e01,
            1.58068e01,
            1.57313e01,
            1.56455e01,
            1.55492e01,
            1.54423e01,
            1.53245e01,
            1.51958e01,
            1.50559e01,
            1.49109e01,
            1.47604e01,
            1.45983e01,
            1.44243e01,
            1.42385e01,
            1.40409e01,
            1.38314e01,
            1.36100e01,
            1.33769e01,
            1.31322e01,
            1.28760e01,
            1.26085e01,
            1.23300e01,
            1.20407e01,
            1.17410e01,
            1.14312e01,
            1.11118e01,
            1.06800e01,
            1.02332e01,
            9.78692e00,
            9.34185e00,
            8.89861e00,
            8.45775e00,
            8.01979e00,
            7.58515e00,
            7.15413e00,
            6.72692e00,
            6.30354e00,
            5.88381e00,
            5.46741e00,
            5.05387e00,
            4.64264e00,
            4.23337e00,
            3.82605e00,
            3.42155e00,
            3.02199e00,
            2.63111e00,
            2.25435e00,
            1.89843e00,
            1.57033e00,
            1.27603e00,
            1.01941e00,
            8.01700e-01,
            6.21608e-01,
            4.75914e-01,
            3.60292e-01,
            2.70019e-01,
            2.00513e-01,
            1.47632e-01,
            1.07818e-01,
            7.81256e-02,
            5.61734e-02,
            4.00773e-02,
            2.83701e-02,
            1.99226e-02,
            1.38758e-02,
            9.58275e-03,
            6.56006e-03,
            4.45014e-03,
            2.99040e-03,
            1.98982e-03,
            1.31055e-03,
            8.54005e-04,
            5.50358e-04,
            3.50595e-04,
            2.20662e-04,
            1.37149e-04,
            8.41329e-05,
            5.09105e-05,
            3.03716e-05,
            1.78517e-05,
            1.03318e-05,
            5.88387e-06,
            3.29494e-06,
            1.81309e-06,
            9.79606e-07,
            5.19287e-07,
            2.69861e-07,
            1.37364e-07,
            6.84278e-08,
            3.33283e-08,
            1.58562e-08,
            7.36148e-09,
            3.33157e-09,
            1.46819e-09,
            6.29330e-10,
            2.62070e-10,
            1.05895e-10,
            4.14649e-11,
        ],
    )


def test_load_rvt_response_spectrum():
    fpath = pathlib.Path(__file__).parent / "data"
    fpath /= "test-bj84.m6.00r020.0_rs.rv.col"
    d = readers.load_rvt_response_spectrum(str(fpath))

    assert_allclose(d["mag"], 6)
    assert_allclose(d["dist"], 20)
    assert_allclose(d["damping"], 0.05)
    assert_allclose(d["duration"], 4.542)
    assert_allclose(
        d["freqs"],
        [
            25.000,
            23.810,
            22.727,
            21.739,
            20.833,
            20.000,
            18.182,
            16.667,
            15.385,
            14.286,
            13.333,
            12.500,
            11.765,
            11.111,
            10.526,
            10.000,
            9.091,
            8.333,
            7.692,
            7.143,
            6.667,
            6.250,
            5.882,
            5.556,
            5.263,
            5.000,
            4.545,
            4.167,
            3.846,
            3.571,
            3.333,
            3.125,
            2.941,
            2.778,
            2.632,
            2.500,
            2.381,
            2.273,
            2.174,
            2.083,
            2.000,
            1.818,
            1.667,
            1.538,
            1.429,
            1.333,
            1.250,
            1.176,
            1.111,
            1.053,
            1.000,
            0.909,
            0.833,
            0.769,
            0.714,
            0.667,
            0.625,
            0.588,
            0.556,
            0.526,
            0.500,
            0.455,
            0.417,
            0.385,
            0.357,
            0.333,
            0.312,
            0.294,
            0.278,
            0.263,
            0.250,
            0.238,
            0.227,
            0.217,
            0.208,
            0.200,
            0.182,
            0.167,
            0.154,
            0.143,
            0.133,
            0.125,
            0.118,
            0.111,
            0.105,
            0.100,
            0.091,
            0.083,
            0.077,
            0.071,
            0.067,
        ],
    )
    assert_allclose(
        d["spec_accels"],
        [
            1.487e02,
            1.578e02,
            1.670e02,
            1.760e02,
            1.848e02,
            1.931e02,
            2.117e02,
            2.274e02,
            2.405e02,
            2.514e02,
            2.606e02,
            2.683e02,
            2.745e02,
            2.795e02,
            2.833e02,
            2.856e02,
            2.858e02,
            2.833e02,
            2.794e02,
            2.747e02,
            2.695e02,
            2.639e02,
            2.582e02,
            2.524e02,
            2.467e02,
            2.410e02,
            2.301e02,
            2.197e02,
            2.099e02,
            2.007e02,
            1.920e02,
            1.839e02,
            1.762e02,
            1.691e02,
            1.623e02,
            1.560e02,
            1.501e02,
            1.444e02,
            1.391e02,
            1.339e02,
            1.290e02,
            1.171e02,
            1.065e02,
            9.731e01,
            8.924e01,
            8.214e01,
            7.584e01,
            7.024e01,
            6.525e01,
            6.079e01,
            5.688e01,
            5.046e01,
            4.514e01,
            4.059e01,
            3.664e01,
            3.318e01,
            3.017e01,
            2.757e01,
            2.532e01,
            2.331e01,
            2.149e01,
            1.834e01,
            1.572e01,
            1.353e01,
            1.170e01,
            1.016e01,
            8.865e00,
            7.771e00,
            6.844e00,
            6.055e00,
            5.382e00,
            4.806e00,
            4.311e00,
            3.884e00,
            3.514e00,
            3.194e00,
            2.561e00,
            2.099e00,
            1.752e00,
            1.486e00,
            1.279e00,
            1.115e00,
            9.823e-01,
            8.738e-01,
            7.839e-01,
            7.087e-01,
            5.912e-01,
            5.030e-01,
            4.342e-01,
            3.791e-01,
            3.342e-01,
        ],
    )
